// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2023 10:37:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK1;
reg [7:0] d0;
reg RST1;
reg STEP;
reg SWA;
reg SWB;
// wires                                               
wire [7:0] BUS;
wire [7:0] I;
wire [7:0] in;
wire LDAR;
wire LDPC;
wire [7:0] led;
wire LED_B;
wire [23:0] M;
wire [7:0] PC;
wire PC_B;
wire RAM_B;
wire SW_B;
wire T1;
wire T2;
wire T3;
wire T4;
wire [5:0] uaddr;

// assign statements (if any)                          
Computer i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.CLK1(CLK1),
	.d0(d0),
	.I(I),
	.in(in),
	.LDAR(LDAR),
	.LDPC(LDPC),
	.led(led),
	.LED_B(LED_B),
	.M(M),
	.PC(PC),
	.PC_B(PC_B),
	.RAM_B(RAM_B),
	.RST1(RST1),
	.STEP(STEP),
	.SW_B(SW_B),
	.SWA(SWA),
	.SWB(SWB),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.uaddr(uaddr)
);
initial 
begin 
#4000000 $finish;
end 

// CLK1
always
begin
	CLK1 = 1'b0;
	CLK1 = #500 1'b1;
	#500;
end 

// STEP
always
begin
	STEP = 1'b0;
	STEP = #10000 1'b1;
	#10000;
end 

// RST1
initial
begin
	RST1 = 1'b1;
	RST1 = #10000 1'b0;
	RST1 = #870000 1'b1;
	RST1 = #10000 1'b0;
	RST1 = #1110000 1'b1;
	RST1 = #20000 1'b0;
end 

// SWA
initial
begin
	SWA = 1'b1;
	SWA = #880000 1'b0;
	SWA = #1140000 1'b1;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #2020000 1'b1;
end 
// d0[ 7 ]
initial
begin
	d0[7] = 1'b0;
	d0[7] = #187500 1'b1;
	d0[7] = #62500 1'b0;
	d0[7] = #240000 1'b1;
	d0[7] = #60000 1'b0;
	d0[7] = #60000 1'b1;
	d0[7] = #60000 1'b0;
	d0[7] = #60000 1'b1;
	d0[7] = #60000 1'b0;
end 
// d0[ 6 ]
initial
begin
	d0[6] = 1'b1;
	d0[6] = #187500 1'b0;
	d0[6] = #62500 1'b1;
	d0[6] = #480000 1'b0;
	d0[6] = #60000 1'b1;
	d0[6] = #60000 1'b0;
end 
// d0[ 5 ]
initial
begin
	d0[5] = 1'b0;
	d0[5] = #490000 1'b1;
	d0[5] = #60000 1'b0;
	d0[5] = #60000 1'b1;
	d0[5] = #60000 1'b0;
end 
// d0[ 4 ]
initial
begin
	d0[4] = 1'b0;
	d0[4] = #250000 1'b1;
	d0[4] = #240000 1'b0;
	d0[4] = #60000 1'b1;
	d0[4] = #300000 1'b0;
	d0[4] = #1170000 1'b1;
end 
// d0[ 3 ]
initial
begin
	d0[3] = 1'b0;
	d0[3] = #250000 1'b1;
	d0[3] = #240000 1'b0;
	d0[3] = #60000 1'b1;
	d0[3] = #60000 1'b0;
	d0[3] = #60000 1'b1;
	d0[3] = #60000 1'b0;
	d0[3] = #60000 1'b1;
	d0[3] = #60000 1'b0;
end 
// d0[ 2 ]
initial
begin
	d0[2] = 1'b1;
	d0[2] = #187500 1'b0;
end 
// d0[ 1 ]
initial
begin
	d0[1] = 1'b0;
	d0[1] = #125000 1'b1;
	d0[1] = #185000 1'b0;
	d0[1] = #120000 1'b1;
	d0[1] = #180000 1'b0;
	d0[1] = #120000 1'b1;
	d0[1] = #120000 1'b0;
	d0[1] = #1170000 1'b1;
end 
// d0[ 0 ]
initial
begin
	d0[0] = 1'b0;
	d0[0] = #62500 1'b1;
	d0[0] = #125000 1'b0;
	d0[0] = #122500 1'b1;
	d0[0] = #60000 1'b0;
	d0[0] = #60000 1'b1;
	d0[0] = #60000 1'b0;
	d0[0] = #120000 1'b1;
	d0[0] = #120000 1'b0;
end 
endmodule

